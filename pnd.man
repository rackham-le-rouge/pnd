.\" Manpage for Prime Number Discovery
.\" Contact jerome.grard@neuf.fr to gave any information about this work
.TH man 8 "04 March 2014" "1.0" "PND rescue boat"
.SH NAME
PND \- multrithreaded and optimized program to find prime numbers. This program only test Mersenne numbers (2^n - 1) and can work alone until it find something...
.SH SYNOPSIS
pnd [-h] [-a] [-f] [-F] [-d] [-s] [u] [-time] [-clear] [-c Wanted_check_per_number] [-i Mersenne_order] [-m Mersenne_order] [-t wanted_threads_number] [-w wanted_moderation_time]
.SH DESCRIPTION
pnd is a program aiming to compute and find new prime number. This tool uses GMP in order to provide arbitrary precision numbers, thus, searching is unlimited. Moreover, this program use openMP in order to share work between a wanted thread number. On recent computers, this function could be really nice to use.
.SH OPTIONS
All options in the command line :
.B
.IP -h
Display this help.
.B
.IP -a
Automatic research. Start with its parameters and compute until user want to stop it.
.B
.IP -f
Fast display mode. If the number is not prime, there is no message on screen and no waiting time until the next search.
.B
.IP -F
Fastmode. For Miller-Rabin only. Throw away all displaying stuff, time counting and other useless things and compute as
fast as possible. The current Mersenne order is still displayed at the screen bottom. Fastmode implies FastDisp (-f)
.B
.IP -d
Turn program into a daemon. Thus, program is like a submarine : you can see it only in process
.B
.IP -s
Speed toogle
.B experimental.
You have choice between speed definded by
.B -w
option or maximal speed. You can toogle with this option.
.B
.IP -u
This mode is to test only one number (the one defined by
.B -m
) and quit right after. If there is no number setted by the command line, the default Mersenne Order is checked.
.B
.IP -time
Print the computation time after each Mersenne number check.
.B
.IP -clear
Remove the hotsave file in order to avoid to load old context on the next start.
.B This parameter needs to be in first place in the command line.
.B
.IP -c
Check number. For the Miller-Rabin algo only ! How many check do you want for an hypothetic prime number (per thread). Thus, to have all check on this hypothetic prime number, you need to multiply by ThreadNumber. Greater this number is, best is the prediction about the prime number.
.B
.IP -m
Mersenne order. Put right after the wanted Mersenne order, and the program starts with this value. Default Mersenne order is set in config.h.
You need to know that there is no check on this number. A valid Mersenne order need to be a prime number in order to give a prime Mersenne
number, and the program don't check if the given order is prime.
.B
.IP -i
Installation. Like -m but this time, you give a Mersenne order right after -i and this order is checked. If the order is valid, it is saved
in the hotsave file, and the programme starts prospecting at this point at the next start. If the given order is no prime, the default
Mersenne order (defined in config.h) is set and saved.
.B
.IP -t
Thread number. Put right after the wanted number of threads working at the same time. Default thread number is set using a detection process at the beginning of the program.
.B
.IP -w
Waiting time. Time to wait between two computation. Usefull to be silent and don't take all the CPU. Default waiting time is set in config.h

.SH USAGE
.HP
In the main menu, there is a hidden function : the 7th one. You can use it by press the key 7 of your keyboard, and 
this function allow to change the computing algorithm. you can choose between Miller-Rabin[selected by default] (the 
best one, really fast but probabilist -> means that there is any 'YES this a prime number', there is only 'MAYBEE it is 
a prime number') and Standart algorithm (if the standart algo says YES, it is YES and anything else... But, this algo 
is really, really long to execute. Don't use it for mersenne order greater than 41)

.HP
During the program execution, you can do some operations. For instance, when you press the '+' key, the thread number used to compute the next
Mersenne number is incremented by one. And that's the same for the key '-'. Moreover, during computation, you can quit by pressing the 'q' key.
You need to wait after a key pressing, the keyboard is checked only when the screen is refresh in order to avoid CPU overload by useless
check.

.HP
There is a log file, and all important informations about the program execution is in it. You can see it by using the command tail pnd.log.
If you want more logs, edit conf.h and uncomment the
.B
DEBUG_VERBOSE
part.

.HP
Thus, you'd probably understood that there is a configuration file named
.B
conf.h.
In it, you can find all informations of the program,
anything you want to change is in it, from the character used in the progressbar to the lenght of buffer for the log messages without
forgetting the default Mersenne number etc... To apply changes you need to
.B 
recompile
the program. In order to do that, use this command :
.B
$ make allc


.HP
This program can survive to a SIGTERM or a SIGINT. When these signals are launched, the program do a hot save of the context. At
the next start, all parameters and progression are baked up from a temporary file : pnd.hotsave. If you want to avoid that, you
just need to erase it.



.SH HOTSAVE FUNCTION
This function is activated when pnd received SIGTERM or SIGINT. This function save the current context and restore it at the
next start. Hotsave function save many parameters in order to restore the right context, but this function don't save them
all. Thus, some command line parameters (sended at the restart of pnd) could be overwritted by the saved context. the saved
parameters are :

.br
Current line number (because line number is the max thread number allowed)
.br
Current Mersenne order (it overwrite the parameter of the -m option)
.br
Current moderation time (it overwrite the parameter of the -w option)
.br
Current thread number (thread who are currently working)

All other parameters can be set with the command line at the next start. It can be used to change some parameters during
an automatic search without losing your progression.

.SH EXAMPLES
.IP
$ ./pnd		Start pnd with its ncurse GUI
.br
$ ./pnd -m 19 -t 20 Start pnd with its GUI to check only Mersenne number with order 19 and use 20 threads to do that
.br
$ ./pnd -a -m 19 -t 20 Do the same, but continue after 19 to the next avaible Mersenne order (it must be a prime number)
.br
$ ./pnd -d -t 20 Use 20 threads, use the default Mersenne order (you can set it in config.h) and run as a deamon. So, you can't see it. The program are just overload your CPU... -d implies -a : program are going to continue computing until its murder
.br
$ ./pnd -f -F -c 5 -a Is the fastest configuration. You can add a -d
.br
$ ./pnd -f -F -d -m 23333 -u Test if Mersenne order 23333 gives a prime number and quit in the daemon mode (without screen output)
.br
$ ./pnd -m -u 23333 Test if Mersenne order 23333 gives a prime number, display the result and ask to quit.
.br
$ ./pnd -clear -d -f -F -m 23333 Remove the old context file, and start another computation in order to find if the order 23333 gives prime or not.

.SH SEE ALSO
ncurses, openmp, gmp, pnd.log, config.h, pnd.hotsave, http://en.literateprograms.org/

.SH BUGS
We are using ncurses and multithreading, thus, there is some funcy little things.
.IP "Keyboard" 
During computation, kerboard is scanned, but, you need to put some time between two keyboard check. On the otherwise, there is some weird character on the screen. This time have been set by me, and you can change it in config.h
.IP "Memory leak" 
Today, because of multithread and several calling to some computing functions using GMP numbers, i can't clear them properly. Program wants to clean them once, at the end, and there is a function to clean them all at the end, but i can't use it now because there is a mysterious segfault in it after the 2nd clear.
.IP "Speed toogle" 
After three toogling, program crash.


.SH AUTHOR
Jerome GRARD (jerome.grard@neuf.fr)
